cd c:\Users\Professional\myDjangoFolder\todowoo-project\
todowoo-venv\Scripts\activate.bat
python manage.py runserver

git add -A
git commit -m "befor p13.1 lesson 6.12 make deny access to todo, if  it made no current user"
git push -u origin main

pip freeze - installed Package

venv:
python -m venv todowoo_venv


1) создаю проект и папку
django-admin startproject todowoo
для создания виртуального окружения, перейдите в директорию своего проекта и выполните:
python -m venv todowoo_venv
активация окружения:

todowoo_venv\Scripts\activate.bat      -для Windows;
source todowoo_venv/bin/activate       -для Linux и MacOS.
2)python manage.py startapp todo    добавл приложен(папку) блог
приложениe todo добавляем в список INSTALLED_APPS файла Settings.py основного приложения
3)python manage.py migrate  -выполним миграцию приложений
теперь можем перезапустить сервер  python manage.py runserver
4) git init
создаем репозит на github todowoo-project
git remote add origin https://github.com/Alexgkz/todowoo-project.git
git branch -M main
git push -u origin main
5) commit p4, les 6.2make todo (venv, git)
Делаем страницу для регистрации на сайте:
в файл urls.py todowoo добавить:
from todo import views
и в urlpatterns = [
    # Auth
    path('signup/', views.signupuser, name='signupuser'),   -страница для регистрации
в файл todo/views.py добавим метод вывода страницы:
      def signupuser(request):
          return render (request, 'todo/signupuser.html')
и создадим файл todo/TEMPLATES/todo/signupuser.html
с одной строчкой "sign up" можно попробовать она отобразится http://127.0.0.1:8000/signup/
5.1)в файл todo/views.py добавим встроенную функцию создания юзеров:
      from django.contrib.auth.forms import UserCreationForm
и добавим ', {'form':UserCreationForm()}' в возврат метода вывода страницы регистрации
в файл todo/TEMPLATES/todo/signupuser.html вместо "sign up" вставим вывод формы страницы подготовленной
в начале этого пункта 5.1:   {{ form.as_p }}
можно попробовать как страница signup отобразится http://127.0.0.1:8000/signup/
5.3) файл todo/TEMPLATES/todo/signupuser.html
добавим заголовок и заключим нашу форму в тег form, чтобы была возможность указывать
метод для нашей формы и добавим кнопку 'Sign UP', и строчку {% csrf_token %} для безопасности от взлома:
        <h1>Sign UP</h1>

        <<form  method="POST">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Sign UP</button>
        </form>
6)commit p6 lesson 6.4     todo/views.py:
    from django.shortcuts import render
    from django.contrib.auth.forms import UserCreationForm
    from django.contrib.auth.models import User                       # импорт модели User'а


    def signupuser(request):
        if requst.method == 'GET':                                  # при вызове через метод 'GET' (через urls.py  или строку в браузере)отобразится страница с запросом имени и паролей
            return render (request, 'todo/signupuser.html', {'form':UserCreationForm()})
        else:                                                        # при вызове через метод 'POST' (нажатие клавиши Sign UP) будут проверены равенство паролей и сохранятся имя юзера и его пароль в dbSQL
            if requst.POST['password1'] == requst.POST['password2']:    #проверены равенство паролей
                user = User.objects.create_user(requst.POST['username']), password=requst.POST['password1']                 # запись логин/пароль в переменную
                user.save() # запись в dbSQL
            else:
                print('hello')
                # будет обработка не одинаковых паролей
  python manage.py createsuperuser          -создадим суперюзера log:alex Email address: alexgkz@mail.ru pas:xxxxx смена пароля python manage.py changepassword alex
  6.1) в файл todo/views.py допишем для обработки ошибки ввода разных паролей в конец:
  return render (request, 'todo/signupuser.html', {'form':UserCreationForm(), 'error':'Passwords did not match'})
  где error - текст ошибки возвращающийся методом, далее в signupuser.html добавляем вывод ошибки:
  <h2>{{ error }}</h2>
  6.2) для обработки ошибки, что логин занят в файл todo/views.py допишем после if:
  if request.POST['password1'] == request.POST['password2']: # проверка что пароли равны
      try:
          user = User.objects.create_user(request.POST['username'], password=request.POST['password1'])
          user.save() #запись учетных данных в dbSql
      except IntegrityError:      #исключение для ошибки "логин занят"
          return render (request, 'todo/signupuser.html', {'form':UserCreationForm(), 'error':'That username has already been taken. Please chose a new username!'}) #вывод страницы регистрации с сообщ об ошибке login уже занят
а также импортируем код ошибки вначале:
      from django.db import IntegrityError

    6.3) в файл todo/views.py допишем для регистрации польз на сайте и перехода на страницу currenttodos:
      from django.shortcuts import render, redirect
      from django.contrib.auth import login   # регистрация пользователя

      login(request, user)     # регистрация пользователя с введенными уч. данными
      return redirect('currenttodos') # редирект на страницу currenttodos
в файл urls.py todowoo добавить для вывода страницы с текущими делами (currenttodos) юзера:
        #Todos
        path('current/', views.currenttodos, name='currenttodos'),

        создадим файл todo/currenttodos.html для страницы currenttodos:
        <h1>current</h1>
7)commit befor p7 lesson 6.6
Создаем Строку состояния что юзер sign up и кнопку sign off.
создаем файл todo/TEMPLATES/todo/base.html:

          <!-- # если юзер залогинен -->
          {% if user.is_authenticated %}

          <!-- # вывод имени юзера -->
          Logged In as {{ user.username }}

          <!-- # кнопка разлогинивания -->
          <a href="#">Logout</a>

          <!-- # если юзер не залогинен -->
          {% else %}

          <!-- # кнопка авторизации и кнопка регистрации -->
          <a href="#">Sign Up</a>
          <a href="#">Login</a>

          {% endif %}

          {% block content %}{% endblock %}
правим файл todo/TEMPLATES/todo/currenttodos.html:
          # show base.html with Code in Tag 'Block content'
          {% extends 'todo/base.html' %}

          {% block content %}

          Current

          {% endblock %}

8)commit befor p8 lesson 6.7
обработка нажат кнопки Logout и созд домашней страницы(home)
в файл todowoo/urls.py add:
        # Auth
          path('logout/', views.logoutuser, name='logoutuser'),


в файле todo/TEMPLATES/todo/base.html добавляем {% url 'logout' %} :
переход по url это всегда метод 'GET':
    <a href="{% url 'logoutuser' %}">Logout</a>     - это нам не подойдет, заменим на:

<form action="{% url 'logoutuser' %}" method="POST">
  {% csrf_token %}
<button type="submit">Logout</button>
</form>


    в файл todo/views.py допишем
          from django.contrib.auth import logout

          def logoutuser(request):
              if request.method == 'POST':
                  logout(request)
                  return redirect('home')     #перенаправление на домашнюю страницу
переход по url это всегда метод 'GET', а по нажатию кнопки 'POST'. браузер кешуруя данные
перейдет по ссылке и разлогинит пользователя, поэтому мы для предотвращения этого
проверяем нажатие кнопки(метод 'POST' ). ЭТО НАДО ДЕЛАТЬ ВСЕГДА во избежание неправильной работы
сайта.
созд домашней страницы(home):
в файл todowoo/urls.py add:
        #Todos
          path('', views.home, name='home'),

в файл todo/views.py допишем:
          def home(request):
              return render (request, 'todo/home.html')

создаем файл todo/TEMPLATES/todo/home.html:
      <!-- # show base.html with Code in Tag 'Block content' -->
      {% extends 'todo/base.html' %}

      {% block content %}

        Home

      {% endblock %}

9)commit befor p9 lesson 6.8
реализация login пользователя:
в файл todowoo/urls.py add:
path('login/', views.loginuser, name='loginuser'),

в файл todo/views.py допишем:
          from django.contrib.auth.forms import AuthenticationForm
          from django.contrib.auth import authenticate  # проверка есть ли пара login/password
          def loginuser(request):
              if request.method == 'GET':         #при вызове через метод 'GET' (через urls.py  или строку в браузере)
                  return render (request, 'todo/loginuser.html', {'form':AuthenticationForm()}) #отобразится страница с запросом имени и пароля
              else:                   #при вызове через метод 'POST' (нажали кнопку login )
                  user = authenticate(request, username=request.POST['username'], password=request.POST['password'])   # проверка есть ли пара login/password и передача их в user
                  if user is None: #если логин пароль неверны повторн загрузка формы с выводом ошибки
                    return render (request, 'todo/loginuser.html', {'form':AuthenticationForm(), "error":'Username and password did not match'})
                  else:
                      login(request, user)     # login пользователя с введенными уч. данными
                      return redirect('currenttodos') # редирект на страницу currenttodos
создаем файл todo/TEMPLATES/todo/loginuser.html:
    <!-- # show base.html with Code in Tag 'Block content' -->
    {% extends 'todo/base.html' %}

    {% block content %}

      <h1>Login</h1>

      <!-- # вывод ошибки, если есть  -->
      <h2>{{ error }}</h2>

      <form  method="POST">
        {% csrf_token %}
      {{ form.as_p }}    <!-- # форма djngo для запроса username и двух паролей   -->
      <button type="submit">Login</button>
      </form>

    {% endblock %}

10)commit befor p10 lesson 6.9
Создадим модель записи Todo в dbDjango, для того добавим в файл todo/models.py:
from django.contrib.auth.models import User #для внесения в модель ID пользователя-создателя

class Todo(models.Model):
    title = models.CharField(max_length=100)
    memo = models.TextField(blank=True) # blank=True - МОЖЕТ быть пустым
    created = models.DateTimeField(auto_now_add=True) #auto_now_add=True -автозаполнение текущим временем
    datacompleted = models.DateTimeField(null=True, blank=True) # null=True - МОЖЕТ быть пустым
    important = models.BooleanField(default=False) #чекбокс
    user = models.ForeignKey(User, on_delete=models.CASCADE) #внесение в модель ID пользователя-создателя

    def __str__(self): #это нужно для отображения имени todo вместо его номера в админке
      return self.title

в командной строке выполним миграцию:
python manage.py makemigrations
python manage.py migrate

добавим модели в файл todo/admin.py
from .models import Todo
admin.site.register(Todo)

для отображения (только для чтения) created(автозаполнение текущим временем) добавим в файл todo/admin.py
class TodoAdmin(admin.ModelAdmin):
    readonly_fields = ('created',)

admin.site.register(Todo, TodoAdmin) # отбражает записи TODO в админке + (, TodoAdmin) для отображения (только для чтения) created(автозаполнение текущим временем)
11) befor p11 lesson 6.10
  Функционал создания записей todo.
в файл todowoo/urls.py add:
    path('create/', views.createtodo, name='createtodo'),
в файл todo/views.py допишем:
    from .forms import TodoForm  # импорт формы страницы создания записей из файла todo/forms.py
    def createtodo(request):
        if request.method == 'GET':         #при вызове через метод 'GET' (через urls.py  или строку в браузере)
            return render (request, 'todo/createtodo.html', {'form':TodoForm()}) #отобразится страница с формой TodoForm() описанной в файле todo/forms.py
        else:
            try:
                form = TodoForm(request.POST) #все заполнные данные в форме TodoForm
                newtodo = form.save(commit=False)   # записываются в dbDjango
                newtodo.user = request.user     # выполняется привязка данных к пользователю
                newtodo.save()  # и тоже записываются в dbDjango
                return redirect('currenttodos') # редирект на страницу currenttodos
            except ValueError:  # если возникла ошибка неправильных данных ValueError
                return render (request, 'todo/createtodo.html', {'form':TodoForm(), 'error':'Bad data passed in. Try again'})

создадим файл todo/TEMPLATES/todo/createtodo.html:
      {% extends 'todo/base.html' %}

      {% block content %}

        <h1>Create</h1>

        <!-- # вывод ошибки, если есть  -->
        <h2>{{ error }}</h2>

        <form  method="POST">
          {% csrf_token %}
        {{ form.as_p }}    <!-- # форма djngo (ввод записей ТуДу) задается в views.py при вызове страницы в данном случае TodoForm(создана нами)   -->
        <button type="submit">Create</button>
        </form>

        {% endblock %}


создадим файл todo/forms.py: для формы записей todos
    from django.forms import ModelForm
    from .models import Todo  # импортируем класс Todo из models.py

    class TodoForm(ModelForm):
        class Meta:
            model = Todo
            fields = ['title', 'memo', 'important']     # это те поля из models.py класса Todo, которые нам нужно заполнять.

12) befor p12 lesson 6.11
Вывод список задач.
в файл todo/views.py допишем:
      from .models import Todo  # импорт модели Todo из файла todo/models.py
      def currenttodos(request):          #отобразится страница с текущими todos
          todos = Todo.objects.filter(user=request.user)      #передаются  данные объектов модели Todo для текущего юзера (user=request.user)
          return render (request, 'todo/currenttodos.html', {'todos':todos}) #отобразится страница currenttodos.html и ей передаются  данные объектов модели Todo для текущего юзера


добавим в файл todo/TEMPLATES/todo/currenttodos.html:

    <!-- # show base.html with Code in Tag 'Block content' -->
    {% extends 'todo/base.html' %}

    {% block content %}

    <ul>

      {% for todo in todos %}
      <li>{{ todo.title}}</li> <!-- #вывод поочереди всех заголовков из todos(создано в views.py) -->
      {% endfor %}
    </ul>

    {% endblock %}

            для исключения вывода законченных todo(datecompleted_isnull=True) внесем изменения в views.py:
                def currenttodos(request):          #отобразится страница с текущими todos
                    todos = Todo.objects.filter(user=request.user, datecompleted__isnull=True)      #передаются  данные объектов модели Todo для текущего юзера (user=request.user) @ исключения вывода законченных todo(datecompleted__isnull=True)

Выделим Important todos жирным шрифтом файл todo/TEMPLATES/todo/currenttodos.html:
<li>{% if todo.important %}<b>{% endif %}{{ todo.title}}{% if todo.important %}</b>{% endif %}</li>
Добавим описание заголовка в views.py в тег li предыдущей строки
<!-- #вывод поочереди всех заголовков(title) из todos(создано в views.py), если important то жирным + описание(models.memo) -->
     <li>
        {% if todo.important %}<b>{% endif %}{{ todo.title}}
        {% if todo.important %}</b>{% endif %}
        {% if todo.memo %} - {{ todo.memo }}{% endif %}
      </li>
13) befor p13 lesson 6.12 "Сделаем список дел кликабельным, для просмотра и изменения дел
в файл todowoo/urls.py add:
    path('todo/<int:todo_pk>', views.viewtodo, name='viewtodo'),

в файл todo/views.py допишем:
      from django.shortcuts import render, redirect, get_object_or_404

      def viewtodo(request, todo_pk):          #отобразится страница с просмотра и изм дел., todo_pk-ключ записи для просмотра
              todo = get_object_or_404(Todo, pk=todo_pk)      #функция получения объекта(записи здесь)
              return render(request, 'todo/viewtodo.html', {'todo':todo}) # отображение записи


добавим в файл todo/TEMPLATES/todo/currenttodos.html для кликабельности заголовков:
<a href="{% url 'viewtodo' todo.id %}"> <!-- тег "a" href=" делает строку гиперссылкой при клике на которую происходит переход на viewtodo и передается todo.id этой записи  -->
</a>

для редактирования дел:
изменим файл todo/views.py, чтобы вместе с заголовком выводилась заполнная форма записи для редактирования:
    def viewtodo(request, todo_pk):          #отобразится страница с просмотра и изм дел., todo_pk-ключ записи для просмотра
            todo = get_object_or_404(Todo, pk=todo_pk)      #функция получения объекта(записи здесь)
            form = TodoForm(instance=todo) #формирование  формы записи
            return render(request, 'todo/viewtodo.html', {'todo':todo, 'form':form}) # отображение записи


edit файл todo/TEMPLATES/todo/currenttodos.html:
    <!-- # show base.html with Code in Tag 'Block content' -->
    {% extends 'todo/base.html' %}

    {% block content %}

    <ul>
      {% for todo in todos %}

       <li>
         <a href="{% url 'viewtodo' {{ todo.id }} %}"> <!-- тег "a" href=" делает строку гиперссылкой при клике на которую происходит переход на viewtodo и передается todo.id этой записи  -->
            {% if todo.important %}<b>{% endif %}       <!-- #если important то жирным шрифтом  -->
              {{ todo.title}}                          <!-- #вывод поочереди всех заголовков(title) из todos(создано в views.py)  -->
            {% if todo.important %}</b>{% endif %}
            {% if todo.memo %}
              - {{ todo.memo }}                         <!-- #если есть описание то оно выводится  -->
            {% endif %}
        </a>
        </li>
      {% endfor %}
    </ul>

    создадим файл todo/TEMPLATES/todo/viewtodo.html:
    <!-- # show base.html with Code in Tag 'Block content' -->
    {% extends 'todo/base.html' %}

    {% block content %}

    {{ error }}

      {{ todo.title }}        <!-- #вывод заголовка -->

      <form method="POST">    <!-- #вывод формы -->
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Save</button>
      </form>

    {% endblock %}

edit todo/views, срабатывания кнопки Save, метод POST:

def viewtodo(request, todo_pk):          #отобразится страница с просмотра и изм дел., todo_pk-ключ записи для просмотра
        todo = get_object_or_404(Todo, pk=todo_pk)      #функция получения объекта(записи здесь)
        if request.method == 'GET':         #при вызове через метод 'GET' (через urls.py  или строку в браузере)
            form = TodoForm(instance=todo)
            return render(request, 'todo/viewtodo.html', {'todo':todo, 'form':form}) # отображение записи
        else:   #срабатывания кнопки Save, метод POST
            try:
                form = TodoForm(request.POST, instance=todo) #все заполнные данные в форме TodoForm, "instance=todo" нужно чтобы показать, что надпись уже была создана и мы ее редактируем
                form.save()  # и тоже записываются в dbDjango
                return redirect('currenttodos') # редирект на страницу currenttodos
            except ValueError:  # если возникла ошибка неправильных данных ValueError
                return render (request, 'todo/viewtodo.html', {'todo':todo, 'form':form, 'error':'Bad data passed in. Try again'})

13.1)befor p13.1 lesson 6.12 make deny access to 'todo', if  it made no current user
  edit todo/views:
  def viewtodo(request, todo_pk):          #отобразится страница с просмотра и изм дел., todo_pk-ключ записи для просмотра
          todo = get_object_or_404(Todo, pk=todo_pk, user=request.user)      #функция получения объекта(записи здесь), user=request.user нужна для того чтобы если запись создана не текущим пользователем и он хочет эту запись отобразить запросом через строку браузера была ошибка 404

14) befor p14 lesson 6.13 maked deny access to 'todo', if  it maked no current user
