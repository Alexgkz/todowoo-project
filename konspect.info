cd c:\Users\Professional\myDjangoFolder\todowoo-project\
todowoo-venv\Scripts\activate.bat
python manage.py runserver

git add -A
git commit -m "befor p8 lesson 6.7"
git push -u origin main

pip freeze - installed Package

venv:
python -m venv todowoo_venv


1) создаю проект и папку
django-admin startproject todowoo
для создания виртуального окружения, перейдите в директорию своего проекта и выполните:
python -m venv todowoo_venv
активация окружения:

todowoo_venv\Scripts\activate.bat      -для Windows;
source todowoo_venv/bin/activate       -для Linux и MacOS.
2)python manage.py startapp todo    добавл приложен(папку) блог
приложениe todo добавляем в список INSTALLED_APPS файла Settings.py основного приложения
3)python manage.py migrate  -выполним миграцию приложений
теперь можем перезапустить сервер  python manage.py runserver
4) git init
создаем репозит на github todowoo-project
git remote add origin https://github.com/Alexgkz/todowoo-project.git
git branch -M main
git push -u origin main
5) commit p4, les 6.2make todo (venv, git)
Делаем страницу для регистрации на сайте:
в файл urls.py todowoo добавить:
from todo import views
и в urlpatterns = [
    # Auth
    path('signup/', views.signupuser, name='signupuser'),   -страница для регистрации
в файл todo/views.py добавим метод вывода страницы:
      def signupuser(request):
          return render (request, 'todo/signupuser.html')
и создадим файл todo/TEMPLATES/todo/signupuser.html
с одной строчкой "sign up" можно попробовать она отобразится http://127.0.0.1:8000/signup/
5.1)в файл todo/views.py добавим встроенную функцию создания юзеров:
      from django.contrib.auth.forms import UserCreationForm
и добавим ', {'form':UserCreationForm()}' в возврат метода вывода страницы регистрации
в файл todo/TEMPLATES/todo/signupuser.html вместо "sign up" вставим вывод формы страницы подготовленной
в начале этого пункта 5.1:   {{ form.as_p }}
можно попробовать как страница signup отобразится http://127.0.0.1:8000/signup/
5.3) файл todo/TEMPLATES/todo/signupuser.html
добавим заголовок и заключим нашу форму в тег form, чтобы была возможность указывать
метод для нашей формы и добавим кнопку 'Sign UP', и строчку {% csrf_token %} для безопасности от взлома:
        <h1>Sign UP</h1>

        <<form  method="POST">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Sign UP</button>
        </form>
6)commit p6 lesson 6.4     todo/views.py:
    from django.shortcuts import render
    from django.contrib.auth.forms import UserCreationForm
    from django.contrib.auth.models import User                       # импорт модели User'а


    def signupuser(request):
        if requst.method == 'GET':                                  # при вызове через метод 'GET' (через urls.py  или строку в браузере)отобразится страница с запросом имени и паролей
            return render (request, 'todo/signupuser.html', {'form':UserCreationForm()})
        else:                                                        # при вызове через метод 'POST' (нажатие клавиши Sign UP) будут проверены равенство паролей и сохранятся имя юзера и его пароль в dbSQL
            if requst.POST['password1'] == requst.POST['password2']:    #проверены равенство паролей
                user = User.objects.create_user(requst.POST['username']), password=requst.POST['password1']                 # запись логин/пароль в переменную
                user.save() # запись в dbSQL
            else:
                print('hello')
                # будет обработка не одинаковых паролей
  python manage.py createsuperuser          -создадим суперюзера log:alex Email address: alexgkz@mail.ru pas:xxxxx смена пароля python manage.py changepassword alex
  6.1) в файл todo/views.py допишем для обработки ошибки ввода разных паролей в конец:
  return render (request, 'todo/signupuser.html', {'form':UserCreationForm(), 'error':'Passwords did not match'})
  где error - текст ошибки возвращающийся методом, далее в signupuser.html добавляем вывод ошибки:
  <h2>{{ error }}</h2>
  6.2) для обработки ошибки, что логин занят в файл todo/views.py допишем после if:
  if request.POST['password1'] == request.POST['password2']: # проверка что пароли равны
      try:
          user = User.objects.create_user(request.POST['username'], password=request.POST['password1'])
          user.save() #запись учетных данных в dbSql
      except IntegrityError:      #исключение для ошибки "логин занят"
          return render (request, 'todo/signupuser.html', {'form':UserCreationForm(), 'error':'That username has already been taken. Please chose a new username!'}) #вывод страницы регистрации с сообщ об ошибке login уже занят
а также импортируем код ошибки вначале:
      from django.db import IntegrityError

    6.3) в файл todo/views.py допишем для регистрации польз на сайте и перехода на страницу currenttodos:
      from django.shortcuts import render, redirect
      from django.contrib.auth import login   # регистрация пользователя

      login(request, user)     # регистрация пользователя с введенными уч. данными
      return redirect('currenttodos') # редирект на страницу currenttodos
в файл urls.py todowoo добавить для вывода страницы с текущими делами (currenttodos) юзера:
        #Todos
        path('current/', views.currenttodos, name='currenttodos'),

        создадим файл todo/currenttodos.html для страницы currenttodos:
        <h1>current</h1>
7)commit befor p7 lesson 6.6
Создаем Строку состояния что юзер sign up и кнопку sign off.
создаем файл todo/TEMPLATES/todo/base.html:

          <!-- # если юзер залогинен -->
          {% if user.is_authenticated %}

          <!-- # вывод имени юзера -->
          Logged In as {{ user.username }}

          <!-- # кнопка разлогинивания -->
          <a href="#">Logout</a>

          <!-- # если юзер не залогинен -->
          {% else %}

          <!-- # кнопка авторизации и кнопка регистрации -->
          <a href="#">Sign Up</a>
          <a href="#">Login</a>

          {% endif %}

          {% block content %}{% endblock %}
правим файл todo/TEMPLATES/todo/currenttodos.html:
          # show base.html with Code in Tag 'Block content'
          {% extends 'todo/base.html' %}

          {% block content %}

          Current

          {% endblock %}

8)commit befor p8 lesson 6.7
